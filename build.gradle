import cd.go.plugin.buildsrc.license.NoticeFileGenerator
import cd.go.plugin.buildsrc.license.TeeRenderer
import com.github.jk1.license.render.SimpleHtmlReportRenderer

plugins {
    id "com.github.jk1.dependency-license-report"
}

group = 'cd.go.plugin.config.json'
version "0.4.4"

apply plugin: 'java'

project.ext.pluginDesc = [
        version: project.version,
        goCdVersion: '18.12.0'
]

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.5'
    compile group: 'commons-io', name: 'commons-io', version: '2.6'
    compile group: 'org.apache.ant', name: 'ant', version: '1.10.7'
    compile group: 'com.beust', name: 'jcommander', version: '1.78'

    compileOnly group: 'cd.go.plugin', name: 'go-plugin-api', version: project.pluginDesc.goCdVersion
    testCompile group: 'cd.go.plugin', name: 'go-plugin-api', version: project.pluginDesc.goCdVersion

    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '3.0.0'
    testCompile group: 'org.hamcrest', name: 'hamcrest-core', version: '2.2'
}

processResources {
    from("resource-templates") {
        filesMatching('*') {
            expand project.pluginDesc
        }
    }
}

sourceSets {
    main {
        java {
            srcDirs = ['src']
        }
        resources {
            srcDir 'resources'
        }
    }

    test {
        java {
            srcDirs = ["test"]
        }
    }
}

test {
    useJUnit {
    }
    testLogging {
        events "passed", "skipped", "failed", "standardOut"
    }
}

// create a fat jar with all dependencies
jar {
    baseName = project.name
    preserveFileTimestamps = false
    reproducibleFileOrder = true

    manifest {
        attributes 'Main-Class': 'com.tw.go.config.json.cli.JsonPluginCli'
    }

    from(generateLicenseReport) {
        into "dependency-license-report"
        exclude "NOTICE.txt"
    }

    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}


licenseReport {
    renderers = [new NoticeFileGenerator(new TeeRenderer(new SimpleHtmlReportRenderer()), "${project.buildDir}/reports/dependency-license/")]
}
